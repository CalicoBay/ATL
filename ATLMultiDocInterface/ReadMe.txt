// December 5, 2016 ////////////////////////////////////////////////////////////////
Upgrading project 'ATLMultiDocEdit'...
	Configuration 'Debug|Win32': changing Platform Toolset to 'v140' (was 'v120').
	Configuration 'Debug|x64': changing Platform Toolset to 'v140' (was 'v120').
	Configuration 'Release|Win32': changing Platform Toolset to 'v140' (was 'v120').
	Configuration 'Release|x64': changing Platform Toolset to 'v140' (was 'v120').
Upgrading project 'ATL-MDI'...
	Configuration 'Debug|Win32': changing Platform Toolset to 'v140' (was 'v120').
	Configuration 'Debug|x64': changing Platform Toolset to 'v140' (was 'v120').
	Configuration 'Release|Win32': changing Platform Toolset to 'v140' (was 'v120').
	Configuration 'Release|x64': changing Platform Toolset to 'v140' (was 'v120').
Upgrading project 'MultiRich'...
	Configuration 'Debug|Win32': changing Platform Toolset to 'v140' (was 'v120').
	Configuration 'Debug|x64': changing Platform Toolset to 'v140' (was 'v120').
	Configuration 'Release|Win32': changing Platform Toolset to 'v140' (was 'v120').
	Configuration 'Release|x64': changing Platform Toolset to 'v140' (was 'v120').
Retargeting End: 3 completed, 0 failed, 0 skipped
////////////////////////////////////////////////////////////////////////////////////

The ATL provides CWindowImpl<class, CWindow, CWinTraits>. CWinTraits come in
Frame, MDI Child and Control flavours. If using the frame as a MDI frame one cannot
just simply set m_pfnSuperWindowProc with the overide because ::DefFrameProc has an
extra parameter for the superclassed "MDICLIENT". One must overide GetWindowProc which
StartWindowProc calls and does some magic to change an HWND into a pointer to call the
overidden WNDPROC with.

The only example of non MFC MDI was found  at VC2010 Samples\C++\OS\WindowsXP\GetImage.
The MDI documentation is somewhat confusing until figured out.
	Create a frame window which creates a "MDICLIENT" class window, then create MDIChildren
========================================================================
    ACTIVE TEMPLATE LIBRARY : ATL-MDI Project Overview
========================================================================

AppWizard has created this ATL-MDI project for you to use as the starting point for
writing your Executable (EXE).

This file contains a summary of what you will find in each of the files that
make up your project.

ATL-MDI.vcxproj
    This is the main project file for VC++ projects generated using an Application Wizard.
    It contains information about the version of Visual C++ that generated the file, and
    information about the platforms, configurations, and project features selected with the
    Application Wizard.

ATL-MDI.vcxproj.filters
    This is the filters file for VC++ projects generated using an Application Wizard. 
    It contains information about the association between the files in your project 
    and the filters. This association is used in the IDE to show grouping of files with
    similar extensions under a specific node (for e.g. ".cpp" files are associated with the
    "Source Files" filter).

//////Removed
ATL-MDI.idl
    This file contains the IDL definitions of the type library, the interfaces
    and co-classes defined in your project.
    This file will be processed by the MIDL compiler to generate:
        C++ interface definitions and GUID declarations (ATL-MDI.h)
        GUID definitions                                (ATL-MDI_i.c)
        A type library                                  (ATL-MDI.tlb)
        Marshaling code                                 (ATL-MDI_p.c and dlldata.c)

ATL-MDI.h
    This file contains the C++ interface definitions and GUID declarations of the
    items defined in ATL-MDI.idl. It will be regenerated by MIDL during compilation.
//////Removed
ATL-MDI.cpp
    This file contains the object map and the implementation of WinMain.

ATL-MDI.rc
    This is a listing of all of the Microsoft Windows resources that the
    program uses.


/////////////////////////////////////////////////////////////////////////////
Other standard files:

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named ATL-MDI.pch and a precompiled types file named StdAfx.obj.

Resource.h
    This is the standard header file that defines resource IDs.

/////////////////////////////////////////////////////////////////////////////
//////Removed
Proxy/stub DLL project and module definition file:

ATL-MDIps.vcxproj
    This file is the project file for building a proxy/stub DLL if necessary.
	The IDL file in the main project must contain at least one interface and you must
	first compile the IDL file before building the proxy/stub DLL.	This process generates
	dlldata.c, ATL-MDI_i.c and ATL-MDI_p.c which are required
	to build the proxy/stub DLL.

ATL-MDIps.vcxproj.filters
    This is the filters file for the proxy/stub project. It contains information about the 
    association between the files in your project and the filters. This association is 
    used in the IDE to show grouping of files with similar extensions under a specific
    node (for e.g. ".cpp" files are associated with the "Source Files" filter).

ATL-MDIps.def
    This module definition file provides the linker with information about the exports
    required by the proxy/stub.

//////Removed
/////////////////////////////////////////////////////////////////////////////
//2024-07-08
This project has been altered to display XAML islands using C++/WinRT. The hyphen needed
to be removed from the project name as the root namespace is the project name. Namespaces
don't like hyphens, makes sense, after all it will be part of a variable identifier.

Many things have changed and this project stills needs cleanup and more.

The original from Team Foundation Server is downloaded as a zip in C:\Users\keesj\OneDrive\Code Samples\ATL.zip
on this laptop. It was unzipped to \\OmenReDone\Z:\ATL which also has an explanatory text file, I believe.

https://learn.microsoft.com/en-us/archive/msdn-magazine/2000/april/which-framework-should-you-use-building-activex-controls-with-atl-and-mfc
Old article in April, 2000, MSDN Magazine above.
https://learn.microsoft.com/en-us/windows/win32/lwef/screen-saver-library
https://learn.microsoft.com/en-us/windows/win32/winmsg/window-classes
https://learn.microsoft.com/en-us/cpp/atl/reference/window-class-macros?view=msvc-170&devlangs=cpp&f1url=%3FappId%3DDev17IDEF1%26l%3DEN-US%26k%3Dk(ATLWIN%252FDECLARE_WND_CLASS)%3Bk(DECLARE_WND_CLASS)%3Bk(DevLang-C%252B%252B)%3Bk(TargetOS-Windows)%26rd%3Dtrue#declare_wnd_class
https://learn.microsoft.com/en-us/cpp/atl/message-maps-atl?view=msvc-170
https://learn.microsoft.com/en-us/cpp/atl/reference/ccontainedwindowt-class?view=msvc-170
https://learn.microsoft.com/en-us/uwp/api/windows.ui.xaml?view=winrt-26100
https://learn.microsoft.com/en-us/microsoft-edge/webview2/get-started/winui
https://github.com/microsoftarchive/msdn-code-gallery-microsoft/tree/master Old controls code, specific below
https://github.com/microsoftarchive/msdn-code-gallery-microsoft/tree/master/OneCodeTeam/Windows%20common%20controls%20demo%20(CppWindowsCommonControls)/%5BC%2B%2B%5D-Windows%20common%20controls%20demo%20(CppWindowsCommonControls)/C%2B%2B/CppWindowsCommonControls
https://learn.microsoft.com/en-us/windows/win32/controls/individual-control-info
//2024-07-08
//2024-07-09
https://learn.microsoft.com/en-us/uwp/cpp-ref-for-winrt/box-value
//2024-07-10
bool bFocusSet = windowInfo->DesktopWindowXamlSource.Content().Focus(winrt::Microsoft::UI::Xaml::FocusState::Pointer);
bFocusSet = windowInfo->DesktopWindowXamlSource.Content().Focus(winrt::Microsoft::UI::Xaml::FocusState::Keyboard);
bFocusSet = windowInfo->DesktopWindowXamlSource.Content().Focus(winrt::Microsoft::UI::Xaml::FocusState::Programmatic);
//The above now commented in ATLMDI.cpp line 68+
https://github.com/microsoft/Xaml-Islands-Samples.git even has a MFC among others, might be 3 years old.
https://github.com/microsoft/Xaml-Islands-Samples/tree/master/Samples/Win32/SampleCppApp a different approach 
than SimpleIslandApp which is in https://github.com/microsoft/WindowsAppSDK-Samples.git. SimpleIslandApp does some 
stuff that I haven't implemented yet which might be key. Check out WM_CREATE line 223 in SimpleIslandApp.cpp.
//2024-07-12
https://learn.microsoft.com/en-gb/windows/apps/desktop/
https://learn.microsoft.com/en-us/windows/uwp/cpp-and-winrt-apis/author-apis
From https://devblogs.microsoft.com/visualstudio/dive-into-native-windows-development-with-new-winui-workload-and-template-improvements/
which I got from the latest Visual Studio Installer,
we get https://aka.ms/windev and https://learn.microsoft.com/windows/apps/get-started/start-here
from there https://learn.microsoft.com/en-us/windows/apps/desktop/?source=recommendations which contains the above among others.
The aka above leads to https://developer.microsoft.com/en-us/windows/develop/ which is a nice splash for development but actually not much new.
I got https://learn.microsoft.com/en-us/windows/apps/windows-app-sdk/reference-framework-package-run-time but it shows a 404 - Page not found
but at https://learn.microsoft.com/en-us/windows/apps/winui/winui3/create-your-first-winui3-app#unpackaged-create-a-new-project-for-an-unpackaged-c-or-c-winui-3-desktop-app 
it says https://learn.microsoft.com/en-us/windows/uwp/cpp-and-winrt-apis/binding-property is a good place to start learning 
about the purpose and usage of .idl files. The beginning of that that points to https://learn.microsoft.com/en-us/windows/uwp/data-binding/ 
and for essential concepts and terms see https://learn.microsoft.com/en-us/windows/uwp/cpp-and-winrt-apis/consume-apis and 
https://learn.microsoft.com/en-us/windows/uwp/cpp-and-winrt-apis/author-apis. The later sporting #factoring-runtime-classes-into-midl-files-idl
Note that these last 3 links are from uwp, but the concepts are the same. https://learn.microsoft.com/en-us/windows/apps/windows-app-sdk/ 
says "If you're working on a UWP app, then refer to https://learn.microsoft.com/en-us/windows/apps/windows-app-sdk/migrate-to-windows-app-sdk/migrate-to-windows-app-sdk-ovw" 
which in turn says "If you're happy with the current functionality of the UWP platform and your UWP app, then there's no need to migrate your 
project. WinUI 2 and the Windows SDK continue to support UWP project types." sure, somewhat confusing, but understandable.
//2024-07-12
//2024-07-13
I need to study this I believe. https://learn.microsoft.com/en-us/windows/win32/midl/midl-start-page
//2024-07-13